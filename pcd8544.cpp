//#include <stdint.h>
#include "pcd8544.h"
//#ifdef MAPLE
//#include <HardwareSPI.h>
//#include <maple.h>
//#define PROGMEM __attribute__ ((section (".USER_FLASH")))
//#define pgm_read_byte(adr) *(adr)

//HardwareSPI spi(SPI_NUM);

//#else  // Arduino stuff
//#include <pins_arduino.h>
//#include <avr/pgmspace.h>
//#endif

// LCD commands, Table 1, page 14
#define PCD8544_FUNCTION_SET (1<<5)
#define PCD8544_FUNCTION_PD  (1<<2)
#define PCD8544_FUNCTION_V   (1<<1)
#define PCD8544_FUNCTION_H   (1<<0)

// Normal instructions, H = 0
#define PCD8544_DISPLAY_CONTROL (1<<3)
#define PCD8544_DISPLAY_CONTROL_D (1<<2)
#define PCD8544_DISPLAY_CONTROL_E (1<<0)
#define PCD8544_DISPLAY_CONTROL_BLANK 0
#define PCD8544_DISPLAY_CONTROL_NORMAL_MODE  PCD8544_DISPLAY_CONTROL_D
#define PCD8544_DISPLAY_CONTROL_ALL_ON       PCD8544_DISPLAY_CONTROL_E
#define PCD8544_DISPLAY_CONTROL_INVERSE      (PCD8544_DISPLAY_CONTROL_D|PCD8544_DISPLAY_CONTROL_E)

#define PCD8544_SET_Y_ADDRESS (1<<6)
#define PCD8544_Y_ADRESS_MASK 0b111
#define PCD8544_SET_X_ADDRESS (1<<7)
#define PCD8544_X_ADRESS_MASK 0b01111111

// Extended instructions. H = 1
#define PCD8544_TEMP_CONTROL (1<<2)
#define PCD8544_TEMP_TC1     (1<<1)
#define PCD8544_TEMP_TC0     (1<<0)

#define PCD8544_BIAS     (1<<4)
#define PCD8544_BIAS_BS2 (1<<2)
#define PCD8544_BIAS_BS1 (1<<1)
#define PCD8544_BIAS_BS0 (1<<0)

#define PCD8544_VOP (1<<7)
#define PCD8544_SET_CONTRAST 0x00
#define PCD8544_SET_VOP        0x00
/*
const unsigned char PROGMEM small_num[][4] = {
        {0x0e,0x15,0x0e,0x00}, // 48, zero
        {0x12,0x1f,0x10,0x00}, // 49, one
        {0x12,0x19,0x16,0x00}, // 50, two
        {0x11,0x15,0x0b,0x00}, // 51, three
        {0x07,0x04,0x1f,0x00}, // 52, four
        {0x17,0x15,0x09,0x00}, // 53, five
        {0x0e,0x15,0x09,0x00}, // 54, six
        {0x19,0x05,0x03,0x00}, // 55, seven
        {0x1a,0x15,0x0b,0x00}, // 56, eight
        {0x12,0x15,0x0e,0x00}, // 57, nine
        {0x00,0x10,0x00,0x00}, // 46, period
};
*/
const char  SmallFont[] [5] PROGMEM =
{
{0x00, 0x00, 0x00, 0x00, 0x00},// (space) 0x20
{0x00, 0x00, 0x5F, 0x00, 0x00},// ! 0x21
{0x00, 0x07, 0x00, 0x07, 0x00},// " 0x22
{0x14, 0x7F, 0x14, 0x7F, 0x14},// # 0x23
{0x24, 0x2A, 0x7F, 0x2A, 0x12},// $ 0x24
{0x23, 0x13, 0x08, 0x64, 0x62},// % 0x25
{0x36, 0x49, 0x55, 0x22, 0x50},// & 0x26
{0x00, 0x05, 0x03, 0x00, 0x00},// ' 0x27
{0x00, 0x1C, 0x22, 0x41, 0x00},// ( 0x28
{0x00, 0x41, 0x22, 0x1C, 0x00},// ) 0x29
{0x08, 0x2A, 0x1C, 0x2A, 0x08},// * 0x2A
{0x08, 0x08, 0x3E, 0x08, 0x08},// + 0x2B
{0x00, 0x50, 0x30, 0x00, 0x00},// , 0x2C
{0x08, 0x08, 0x08, 0x08, 0x08},// - 0x2D
{0x00, 0x60, 0x60, 0x00, 0x00},// . 0x2E
{0x20, 0x10, 0x08, 0x04, 0x02},// / 0x2F
{0x3E, 0x51, 0x49, 0x45, 0x3E},//   0x30
{0x00, 0x42, 0x7F, 0x40, 0x00},// 1 0x31
{0x42, 0x61, 0x51, 0x49, 0x46},// 2 0x32
{0x21, 0x41, 0x45, 0x4B, 0x31},// 3 0x33
{0x18, 0x14, 0x12, 0x7F, 0x10},// 4 0x34
{0x27, 0x45, 0x45, 0x45, 0x39},// 5 0x35
{0x3C, 0x4A, 0x49, 0x49, 0x30},// 6 0x36
{0x01, 0x71, 0x09, 0x05, 0x03},// 7 0x37
{0x36, 0x49, 0x49, 0x49, 0x36},// 8 0x38
{0x06, 0x49, 0x49, 0x29, 0x1E},// 9 0x39
{0x00, 0x36, 0x36, 0x00, 0x00},// : 0x3A
{0x00, 0x56, 0x36, 0x00, 0x00},// ; 0x3B
{0x00, 0x08, 0x14, 0x22, 0x41},// < 0x3C
{0x14, 0x14, 0x14, 0x14, 0x14},// = 0x3D
{0x41, 0x22, 0x14, 0x08, 0x00},// > 0x3E
{0x02, 0x01, 0x51, 0x09, 0x06},// ? 0x3F
{0x32, 0x49, 0x79, 0x41, 0x3E},// @ 0x40
{0x7E, 0x11, 0x11, 0x11, 0x7E},// A 0x41
{0x7F, 0x49, 0x49, 0x49, 0x36},// B 0x42
{0x3E, 0x41, 0x41, 0x41, 0x22},// C 0x43
{0x7F, 0x41, 0x41, 0x22, 0x1C},// D 0x44
{0x7F, 0x49, 0x49, 0x49, 0x41},// E 0x45
{0x7F, 0x09, 0x09, 0x01, 0x01},// F 0x46
{0x3E, 0x41, 0x41, 0x51, 0x32},// G 0x47
{0x7F, 0x08, 0x08, 0x08, 0x7F},// H 0x48
{0x00, 0x41, 0x7F, 0x41, 0x00},// I 0x49
{0x20, 0x40, 0x41, 0x3F, 0x01},// J 0x4A
{0x7F, 0x08, 0x14, 0x22, 0x41},// K 0x4B
{0x7F, 0x40, 0x40, 0x40, 0x40},// L 0x4C
{0x7F, 0x02, 0x04, 0x02, 0x7F},// M 0x4D
{0x7F, 0x04, 0x08, 0x10, 0x7F},// N 0x4E
{0x3E, 0x41, 0x41, 0x41, 0x3E},// O 0x4F
{0x7F, 0x09, 0x09, 0x09, 0x06},// P 0x50
{0x3E, 0x41, 0x51, 0x21, 0x5E},// Q 0x51
{0x7F, 0x09, 0x19, 0x29, 0x46},// R 0x52
{0x46, 0x49, 0x49, 0x49, 0x31},// S 0x53
{0x01, 0x01, 0x7F, 0x01, 0x01},// T 0x54
{0x3F, 0x40, 0x40, 0x40, 0x3F},// U 0x55
{0x1F, 0x20, 0x40, 0x20, 0x1F},// V 0x56
{0x7F, 0x20, 0x18, 0x20, 0x7F},// W 0x57
{0x63, 0x14, 0x08, 0x14, 0x63},// X 0x58
{0x03, 0x04, 0x78, 0x04, 0x03},// Y 0x59
{0x61, 0x51, 0x49, 0x45, 0x43},// Z 0x5A
{0x00, 0x00, 0x7F, 0x41, 0x41},// [ 0x5B
{0x02, 0x04, 0x08, 0x10, 0x20},// \ 0x5C
{0x41, 0x41, 0x7F, 0x00, 0x00},// ] 0x5D
{0x04, 0x02, 0x01, 0x02, 0x04},// ^ 0x5E
{0x40, 0x40, 0x40, 0x40, 0x40},// _ 0x5F
{0x00, 0x01, 0x02, 0x04, 0x00},// ` 0x60
{0x20, 0x54, 0x54, 0x54, 0x78},// a 0x61
{0x7F, 0x48, 0x44, 0x44, 0x38},// b 0x62
{0x38, 0x44, 0x44, 0x44, 0x20},// c 0x63
{0x38, 0x44, 0x44, 0x48, 0x7F},// d 0x64
{0x38, 0x54, 0x54, 0x54, 0x18},// e 0x65
{0x08, 0x7E, 0x09, 0x01, 0x02},// f 0x66
{0x08, 0x14, 0x54, 0x54, 0x3C},// g 0x67
{0x7F, 0x08, 0x04, 0x04, 0x78},// h 0x68
{0x00, 0x44, 0x7D, 0x40, 0x00},// i 0x69
{0x20, 0x40, 0x44, 0x3D, 0x00},// j 0x6A
{0x00, 0x7F, 0x10, 0x28, 0x44},// k 0x6B
{0x00, 0x41, 0x7F, 0x40, 0x00},// l 0x6C
{0x7C, 0x04, 0x18, 0x04, 0x78},// m 0x6D
{0x7C, 0x08, 0x04, 0x04, 0x78},// n 0x6E
{0x38, 0x44, 0x44, 0x44, 0x38},// o 0x6F
{0x7C, 0x14, 0x14, 0x14, 0x08},// p 0x70
{0x08, 0x14, 0x14, 0x18, 0x7C},// q 0x71
{0x7C, 0x08, 0x04, 0x04, 0x08},// r 0x72
{0x48, 0x54, 0x54, 0x54, 0x20},// s 0x73
{0x04, 0x3F, 0x44, 0x40, 0x20},// t 0x74
{0x3C, 0x40, 0x40, 0x20, 0x7C},// u 0x75
{0x1C, 0x20, 0x40, 0x20, 0x1C},// v 0x76
{0x3C, 0x40, 0x30, 0x40, 0x3C},// w 0x77
{0x44, 0x28, 0x10, 0x28, 0x44},// x 0x78
{0x0C, 0x50, 0x50, 0x50, 0x3C},// y 0x79
{0x44, 0x64, 0x54, 0x4C, 0x44},// z 0x7A
{0x00, 0x08, 0x36, 0x41, 0x00},// { 0x7B
{0x00, 0x00, 0x7F, 0x00, 0x00},// | 0x7C
{0x00, 0x41, 0x36, 0x08, 0x00},// } 0x7D
{0x08, 0x08, 0x2A, 0x1C, 0x08},// > 0x7E
{0x08, 0x1C, 0x2A, 0x08, 0x08},// < 0x7F
{0x7e, 0x11, 0x11, 0x11, 0x7e},//A  0x90
{0x7f, 0x49, 0x49, 0x49, 0x33},//Б  0x91
{0x7f, 0x49, 0x49, 0x49, 0x36},//В  0x92
{0x7f, 0x01, 0x01, 0x01, 0x03},//Г  0x93
{0xe0, 0x51, 0x4f, 0x41, 0xff},//Д  0x94
{0x7f, 0x49, 0x49, 0x49, 0x41},//E  0x95
{0x77, 0x08, 0x7f, 0x08, 0x77},//Ж  0x96
{0x41, 0x49, 0x49, 0x49, 0x36},//З  0x97
{0x7f, 0x10, 0x08, 0x04, 0x7f},//И  0x98
{0x7c, 0x21, 0x12, 0x09, 0x7c},//Й  0x99
{0x7f, 0x08, 0x14, 0x22, 0x41},//K  0x9A
{0x20, 0x41, 0x3f, 0x01, 0x7f},//Л  0x9B
{0x7f, 0x02, 0x0c, 0x02, 0x7f},//M  0x9C
{0x7f, 0x08, 0x08, 0x08, 0x7f},//H  0x9D
{0x3e, 0x41, 0x41, 0x41, 0x3e},//O  0x9E
{0x7f, 0x01, 0x01, 0x01, 0x7f},//П  0x9F
{0x7f, 0x09, 0x09, 0x09, 0x06},//P  0xA0
{0x3e, 0x41, 0x41, 0x41, 0x22},//C  0xA1
{0x01, 0x01, 0x7f, 0x01, 0x01},//T  0xA2
{0x47, 0x28, 0x10, 0x08, 0x07},//У  0xA3
{0x1c, 0x22, 0x7f, 0x22, 0x1c},//Ф  0xA4
{0x63, 0x14, 0x08, 0x14, 0x63},//X  0xA5
{0x7f, 0x40, 0x40, 0x40, 0xff},//Ц  0xA6
{0x07, 0x08, 0x08, 0x08, 0x7f},//Ч  0xA7
{0x7f, 0x40, 0x7f, 0x40, 0x7f},//Ш  0xA8
{0x7f, 0x40, 0x7f, 0x40, 0xff},//Щ  0xA9
{0x01, 0x7f, 0x48, 0x48, 0x30},//Ъ  0xAA
{0x7f, 0x48, 0x30, 0x00, 0x7f},//Ы  0xAB
{0x00, 0x7f, 0x48, 0x48, 0x30},//Э  0xAC
{0x22, 0x41, 0x49, 0x49, 0x3e},//Ь  0xAD
{0x7f, 0x08, 0x3e, 0x41, 0x3e},//Ю  0xAE
{0x46, 0x29, 0x19, 0x09, 0x7f},//Я  0xAF
{0x20, 0x54, 0x54, 0x54, 0x78},//a  0xB0
{0x3c, 0x4a, 0x4a, 0x49, 0x31},//б  0xB1
{0x7c, 0x54, 0x54, 0x28, 0x00},//в  0xB2
{0x7c, 0x04, 0x04, 0x04, 0x0c},//г  0xB3
{0xe0, 0x54, 0x4c, 0x44, 0xfc},//д  0xB4
{0x38, 0x54, 0x54, 0x54, 0x18},//e  0xB5
{0x6c, 0x10, 0x7c, 0x10, 0x6c},//ж  0xB6
{0x44, 0x44, 0x54, 0x54, 0x28},//з  0xB7
{0x7c, 0x20, 0x10, 0x08, 0x7c},//и  0xB8
{0x7c, 0x41, 0x22, 0x11, 0x7c},//й  0xB9
{0x7c, 0x10, 0x28, 0x44, 0x00},//к  0xBA
{0x20, 0x44, 0x3c, 0x04, 0x7c},//л  0xBB
{0x7c, 0x08, 0x10, 0x08, 0x7c},//м  0xBC
{0x7c, 0x10, 0x10, 0x10, 0x7c},//н  0xBD
{0x38, 0x44, 0x44, 0x44, 0x38},//o  0xBE
{0x7c, 0x04, 0x04, 0x04, 0x7c},//п  0xBF
{0x7C, 0x14, 0x14, 0x14, 0x08},//p  0x80
{0x38, 0x44, 0x44, 0x44, 0x20},//c  0x81
{0x04, 0x04, 0x7c, 0x04, 0x04},//т  0x82
{0x0C, 0x50, 0x50, 0x50, 0x3C},//у  0x83
{0x30, 0x48, 0xfc, 0x48, 0x30},//ф  0x84
{0x44, 0x28, 0x10, 0x28, 0x44},//x  0x85
{0x7c, 0x40, 0x40, 0x40, 0xfc},//ц  0x86
{0x0c, 0x10, 0x10, 0x10, 0x7c},//ч  0x87
{0x7c, 0x40, 0x7c, 0x40, 0x7c},//ш  0x88
{0xbc, 0x40, 0x7c, 0x40, 0x7c},//щ  0x89
{0x04, 0x7c, 0x50, 0x50, 0x20},//ъ  0x8A
{0x7c, 0x50, 0x50, 0x20, 0x7c},//ы  0x8B
{0x7c, 0x50, 0x50, 0x20, 0x00},//ь  0x8C
{0x28, 0x44, 0x54, 0x54, 0x38},//э  0x8D
{0x7c, 0x10, 0x38, 0x44, 0x38},//ю  0x8E
{0x08, 0x54, 0x34, 0x14, 0x7c},//я  0x8F
{0x7e, 0x11, 0x11, 0x11, 0x7e},//A  0x90
{0x7f, 0x49, 0x49, 0x49, 0x33},//Б  0x91
{0x7f, 0x49, 0x49, 0x49, 0x36},//В  0x92
{0x7f, 0x01, 0x01, 0x01, 0x03},//Г  0x93
{0xe0, 0x51, 0x4f, 0x41, 0xff},//Д  0x94
{0x7f, 0x49, 0x49, 0x49, 0x41},//E  0x95
{0x77, 0x08, 0x7f, 0x08, 0x77},//Ж  0x96
{0x41, 0x49, 0x49, 0x49, 0x36},//З  0x97
{0x7f, 0x10, 0x08, 0x04, 0x7f},//И  0x98
{0x7c, 0x21, 0x12, 0x09, 0x7c},//Й  0x99
{0x7f, 0x08, 0x14, 0x22, 0x41},//K  0x9A
{0x20, 0x41, 0x3f, 0x01, 0x7f},//Л  0x9B
{0x7f, 0x02, 0x0c, 0x02, 0x7f},//M  0x9C
{0x7f, 0x08, 0x08, 0x08, 0x7f},//H  0x9D
{0x3e, 0x41, 0x41, 0x41, 0x3e},//O  0x9E
{0x7f, 0x01, 0x01, 0x01, 0x7f},//П  0x9F
{0x7f, 0x09, 0x09, 0x09, 0x06},//P  0xA0
{0x3e, 0x41, 0x41, 0x41, 0x22},//C  0xA1
{0x01, 0x01, 0x7f, 0x01, 0x01},//T  0xA2
{0x47, 0x28, 0x10, 0x08, 0x07},//У  0xA3
{0x1c, 0x22, 0x7f, 0x22, 0x1c},//Ф  0xA4
{0x63, 0x14, 0x08, 0x14, 0x63},//X  0xA5
{0x7f, 0x40, 0x40, 0x40, 0xff},//Ц  0xA6
{0x07, 0x08, 0x08, 0x08, 0x7f},//Ч  0xA7
{0x7f, 0x40, 0x7f, 0x40, 0x7f},//Ш  0xA8
{0x7f, 0x40, 0x7f, 0x40, 0xff},//Щ  0xA9
{0x01, 0x7f, 0x48, 0x48, 0x30},//Ъ  0xAA
{0x7f, 0x48, 0x30, 0x00, 0x7f},//Ы  0xAB
{0x00, 0x7f, 0x48, 0x48, 0x30},//Э  0xAC
{0x22, 0x41, 0x49, 0x49, 0x3e},//Ь  0xAD
{0x7f, 0x08, 0x3e, 0x41, 0x3e},//Ю  0xAE
{0x46, 0x29, 0x19, 0x09, 0x7f},//Я  0xAF
{0x20, 0x54, 0x54, 0x54, 0x78},//a  0xB0
{0x3c, 0x4a, 0x4a, 0x49, 0x31},//б  0xB1
{0x7c, 0x54, 0x54, 0x28, 0x00},//в  0xB2
{0x7c, 0x04, 0x04, 0x04, 0x0c},//г  0xB3
{0xe0, 0x54, 0x4c, 0x44, 0xfc},//д  0xB4
{0x38, 0x54, 0x54, 0x54, 0x18},//e  0xB5
{0x6c, 0x10, 0x7c, 0x10, 0x6c},//ж  0xB6
{0x44, 0x44, 0x54, 0x54, 0x28},//з  0xB7
{0x7c, 0x20, 0x10, 0x08, 0x7c},//и  0xB8
{0x7c, 0x41, 0x22, 0x11, 0x7c},//й  0xB9
{0x7c, 0x10, 0x28, 0x44, 0x00},//к  0xBA
{0x20, 0x44, 0x3c, 0x04, 0x7c},//л  0xBB
{0x7c, 0x08, 0x10, 0x08, 0x7c},//м  0xBC
{0x7c, 0x10, 0x10, 0x10, 0x7c},//н  0xBD
{0x38, 0x44, 0x44, 0x44, 0x38},//o  0xBE
{0x7c, 0x04, 0x04, 0x04, 0x7c},//п  0xBF
{0x7C, 0x14, 0x14, 0x14, 0x08},//p  0x80
{0x38, 0x44, 0x44, 0x44, 0x20},//c  0x81
{0x04, 0x04, 0x7c, 0x04, 0x04},//т  0x82
{0x0C, 0x50, 0x50, 0x50, 0x3C},//у  0x83
{0x30, 0x48, 0xfc, 0x48, 0x30},//ф  0x84
{0x44, 0x28, 0x10, 0x28, 0x44},//x  0x85
{0x7c, 0x40, 0x40, 0x40, 0xfc},//ц  0x86
{0x0c, 0x10, 0x10, 0x10, 0x7c},//ч  0x87
{0x7c, 0x40, 0x7c, 0x40, 0x7c},//ш  0x88
{0xbc, 0x40, 0x7c, 0x40, 0x7c},//щ  0x89
{0x04, 0x7c, 0x50, 0x50, 0x20},//ъ  0x8A
{0x7c, 0x50, 0x50, 0x20, 0x7c},//ы  0x8B
{0x7c, 0x50, 0x50, 0x20, 0x00},//ь  0x8C
{0x28, 0x44, 0x54, 0x54, 0x38},//э  0x8D
{0x7c, 0x10, 0x38, 0x44, 0x38},//ю  0x8E
{0x08, 0x54, 0x34, 0x14, 0x7c}//я  0x8F

};

pcd8544::pcd8544(uint8_t dc_pin, uint8_t reset_pin, uint8_t cs_pin)
{
  dc = dc_pin;
  cs = cs_pin;
  reset = reset_pin;
  sdin = MOSI;
  sclk = SCK;
}
void pcd8544::begin(uint8_t cntrst)
{
  pinMode(cs,   OUTPUT);
  pinMode(reset, OUTPUT);
  pinMode(dc,    OUTPUT);
  pinMode(sdin,  OUTPUT);
  pinMode(sclk,  OUTPUT);
  pinMode(SS, OUTPUT); // To ensure master mode
  SPCR |= (1<<SPE) | (1<<MSTR);
  digitalWrite(reset, LOW);
  delay(1);
  digitalWrite(reset, HIGH);
  // Extenden instructions and !powerdown
  // and horizontal adressing (autoincrement of x-adress)
  command(PCD8544_FUNCTION_SET | PCD8544_FUNCTION_H);
  // Set Vop to 0x80
  command(PCD8544_VOP | cntrst);
  // Vlcd temp. coeff. 0
  command(PCD8544_TEMP_CONTROL);
  // Bias system 4, 1:48
  command(PCD8544_BIAS | PCD8544_BIAS_BS1 | PCD8544_BIAS_BS0);
  // Set H = 0 for normal instructions
  command(PCD8544_FUNCTION_SET);  
  // Normal mode
  command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_CONTROL_NORMAL_MODE);
}

void pcd8544::setcontrast(uint8_t contr)
{
  command(PCD8544_FUNCTION_SET | PCD8544_FUNCTION_H);
  command(PCD8544_VOP | contr);
  command(PCD8544_FUNCTION_SET);  
  command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_CONTROL_NORMAL_MODE);
}
void pcd8544::clear(void)
{
  int i;
  for (i = 0; i < PCD8544_WIDTH*PCD8544_LINES; i++)
    data(0);
}

WRITE_RESULT pcd8544::write(uint8_t ch)
{
  uint8_t i;
  if (ch == '\r')
    gotoRc(current_row, 0);
  if (ch == '\n')
    gotoRc(current_row+1, current_column);
    for (i = 0; i < 5; i++)
      data(pgm_read_byte(&SmallFont[ch-32][i]) <<1);
    data(0);
  
  WRITE_RETURN;
}


void pcd8544::data(uint8_t data)
{
  send(1, data);
}

void pcd8544::command(uint8_t data)
{
  send(0, data);
}

void pcd8544::send(uint8_t data_or_command, uint8_t data)
{
  digitalWrite(dc, data_or_command);
  digitalWrite(cs, LOW);
    SPDR = data;
    while(!(SPSR & (1<<SPIF))) ;
  digitalWrite(cs, HIGH);
  if(data_or_command)
    inc_row_column();
}


void pcd8544::setCursor(uint8_t column, uint8_t row)
{
  gotoRc(row, 6*column);
}
void pcd8544::clearLine(uint8_t row)
{
  gotoRc(row, 0);
  data(0);
  while (current_column != 0)
    data(0);
}


void pcd8544::gotoRc(uint8_t row, uint8_t column)
{
  if (row >= PCD8544_LINES)
    row %= PCD8544_LINES;
  if (column >= PCD8544_WIDTH)
    row %= PCD8544_WIDTH;
  command(PCD8544_SET_X_ADDRESS | column);
  command(PCD8544_SET_Y_ADDRESS | row);
  current_row = row;
  current_column = column;
}

void pcd8544::inc_row_column(void)
{
  if (++current_column >= PCD8544_WIDTH) {
    current_column = 0;
    if (++current_row >= PCD8544_LINES)
          current_row = 0;
  }
}
void pcd8544::clearRestOfLine(void)
{
  while (current_column != 0)
    data(0);
}

/*
void pcd8544::smallNum(uint8_t num, uint8_t shift)
{
  uint8_t i;
  for (i = 0; i < 4; i++)
    data(pgm_read_byte(&small_num[num][i])<<shift);
}
*/

void pcd8544::printat(uint8_t column, uint8_t row, String all)
{
  gotoRc(row, 6*column);
  print(all);
}
void pcd8544::printat(uint8_t column, uint8_t row, long all)
{
  gotoRc(row, 6*column);
  print(all);
}
/*
void pcd8544::bitmap(uint8_t bdata[], uint8_t rows, uint8_t columns)
{
  uint8_t row, column, i;
  uint8_t toprow = current_row;
  uint8_t startcolumn = current_column;
  for (row = 0, i = 0; row < rows; row++) {
    gotoRc(row+toprow, startcolumn);
    for (column = 0; column < columns; column++) {
      data(pgm_read_byte(&bdata[i++]));
    }
  }
}
*/
